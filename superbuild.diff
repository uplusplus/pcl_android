diff --git a/toolchains/toolchain-android.cmake b/toolchains/toolchain-android.cmake
index b4357e3..1aaded6 100644
--- a/toolchains/toolchain-android.cmake
+++ b/toolchains/toolchain-android.cmake
@@ -312,7 +312,7 @@ set( CMAKE_SYSTEM_VERSION 1 )
 # rpath makes low sence for Android
 set( CMAKE_SKIP_RPATH TRUE CACHE BOOL "If set, runtime paths are not added when using shared libraries." )
 
-set( ANDROID_SUPPORTED_NDK_VERSIONS ${ANDROID_EXTRA_NDK_VERSIONS} -r8d -r8c -r8b -r8 -r7c -r7b -r7 -r6b -r6 -r5c -r5b -r5 "" )
+set( ANDROID_SUPPORTED_NDK_VERSIONS ${ANDROID_EXTRA_NDK_VERSIONS} -r8e -r8d -r8c -r8b -r8 -r7c -r7b -r7 -r6b -r6 -r5c -r5b -r5 "" )
 if(NOT DEFINED ANDROID_NDK_SEARCH_PATHS)
  if( CMAKE_HOST_WIN32 )
   file( TO_CMAKE_PATH "$ENV{PROGRAMFILES}" ANDROID_NDK_SEARCH_PATHS )
@@ -334,7 +334,6 @@ set( ANDROID_DEFAULT_NDK_API_LEVEL 8 )
 set( ANDROID_DEFAULT_NDK_API_LEVEL_x86 9 )
 set( ANDROID_DEFAULT_NDK_API_LEVEL_mips 9 )
 
-
 macro( __LIST_FILTER listvar regex )
  if( ${listvar} )
   foreach( __val ${${listvar}} )
@@ -502,6 +501,7 @@ if( NOT ANDROID_NDK )
 endif( NOT ANDROID_NDK )
 # remember found paths
 if( ANDROID_NDK )
+ message( STATUS "Using path for Android NDK: ${ANDROID_NDK}" )
  get_filename_component( ANDROID_NDK "${ANDROID_NDK}" ABSOLUTE )
  # try to detect change
  if( CMAKE_AR )
@@ -516,7 +516,21 @@ if( ANDROID_NDK )
  endif()
  set( ANDROID_NDK "${ANDROID_NDK}" CACHE INTERNAL "Path of the Android NDK" FORCE )
  set( BUILD_WITH_ANDROID_NDK True )
- file( STRINGS "${ANDROID_NDK}/RELEASE.TXT" ANDROID_NDK_RELEASE LIMIT_COUNT 1 REGEX r[0-9]+[a-z]? )
+ #file( STRINGS "${ANDROID_NDK}/RELEASE.TXT" ANDROID_NDK_RELEASE LIMIT_COUNT 1 REGEX r[0-9]+[a-z]? )
+  file( STRINGS "${ANDROID_NDK}/RELEASE.TXT" ANDROID_NDK_RELEASE_TXT LIMIT_COUNT 1 REGEX r[0-9]+[a-z]? )
+
+ if(${ANDROID_NDK_RELEASE_TXT} MATCHES "^r[0-9]+[a-z] \([^ ]+\)$")
+  string( REGEX REPLACE "^(r[0-9]+[a-z]) \(([^ ]+)\)$" "\\1" ANDROID_NDK_RELEASE "${ANDROID_NDK_RELEASE_TXT}" )
+  string( REGEX REPLACE "^(r[0-9]+[a-z]) \(([^ ]+)\)$" "\\2" ANDROID_NDK_RELEASE_EXTRA "${ANDROID_NDK_RELEASE_TXT}" )
+
+  set( ANDROID_NDK_64BIT True)
+  set( ANDROID_NDK_HOST_SYSTEM_NAME "${ANDROID_NDK_HOST_SYSTEM_NAME}_64" )
+
+  message( STATUS, "ANDROID_NDK_HOST_SYSTEM_NAME ${ANDROID_NDK_HOST_SYSTEM_NAME}")
+
+ else()
+  set( ANDROID_NDK_RELEASE "${ANDROID_NDK_RELEASE_TXT}" )
+ endif()
 elseif( ANDROID_STANDALONE_TOOLCHAIN )
  get_filename_component( ANDROID_STANDALONE_TOOLCHAIN "${ANDROID_STANDALONE_TOOLCHAIN}" ABSOLUTE )
  # try to detect change
@@ -577,7 +591,9 @@ macro( __GLOB_NDK_TOOLCHAINS __availableToolchainsVar )
   else()
    set( __gcc_toolchain "${__toolchain}" )
   endif()
+#   message( STATUS "__gcc_toolchain ${__gcc_toolchain}" )
   __DETECT_TOOLCHAIN_MACHINE_NAME( __machine "${ANDROID_NDK}/toolchains/${__gcc_toolchain}/prebuilt/${ANDROID_NDK_HOST_SYSTEM_NAME}" )
+  message( STATUS "__machine ${__machine} at ${ANDROID_NDK}/toolchains/${__gcc_toolchain}/prebuilt/${ANDROID_NDK_HOST_SYSTEM_NAME}" )
   if( __machine )
    string( REGEX MATCH "[0-9]+[.][0-9]+([.][0-9]+)?$" __version "${__gcc_toolchain}" )
    string( REGEX MATCH "^[^-]+" __arch "${__gcc_toolchain}" )
@@ -585,6 +601,7 @@ macro( __GLOB_NDK_TOOLCHAINS __availableToolchainsVar )
    list( APPEND __availableToolchainArchs "${__arch}" )
    list( APPEND __availableToolchainCompilerVersions "${__version}" )
   else()
+   message( STATUS "__availableToolchainsVar remove ${__toolchain}" )
    list( REMOVE_ITEM ${__availableToolchainsVar} "${__toolchain}" )
   endif()
   unset( __gcc_toolchain )
@@ -593,6 +610,9 @@ endmacro()
 
 # get all the details about NDK
 if( BUILD_WITH_ANDROID_NDK )
+#	set(ANDROID_TOOLCHAIN_PREFIX "arm-linux-androideabi-4.4.3")
+#	set(ANDROID_TOOLCHAIN_NAME "${ANDROID_TOOLCHAIN_PREFIX}")
+#	set(ANDROID_TOOLCHAIN_PLATFORM_NAME "arm")
  file( GLOB ANDROID_SUPPORTED_NATIVE_API_LEVELS RELATIVE "${ANDROID_NDK}/platforms" "${ANDROID_NDK}/platforms/android-*" )
  string( REPLACE "android-" "" ANDROID_SUPPORTED_NATIVE_API_LEVELS "${ANDROID_SUPPORTED_NATIVE_API_LEVELS}" )
  set( __availableToolchains "" )
@@ -614,7 +634,7 @@ if( BUILD_WITH_ANDROID_NDK )
   __GLOB_NDK_TOOLCHAINS( __availableToolchains )
  endif()
  if( NOT __availableToolchains )
-  message( FATAL_ERROR "Could not find any working toolchain in the NDK. Probably your Android NDK is broken." )
+  message( FATAL_ERROR "Could not find any working toolchain ${ANDROID_NDK}/toolchains/${ANDROID_TOOLCHAIN_NAME}/ ${ANDROID_TOOLCHAIN_NAME} in the NDK. Probably your Android NDK is broken." )
  endif()
 endif()
 
@@ -1569,9 +1589,9 @@ endif()
 #   BUILD_ANDROID : always TRUE
 #   BUILD_WITH_ANDROID_NDK : TRUE if NDK is used
 #   BUILD_WITH_STANDALONE_TOOLCHAIN : TRUE if standalone toolchain is used
-#   ANDROID_NDK_HOST_SYSTEM_NAME : "windows", "linux-x86" or "darwin-x86" depending on host platform
+#   ANDROID_NDK_HOST_SYSTEM_NAME : "windows", "linux-x86","linux-x86_64" or "darwin-x86" depending on host platform
 #   ANDROID_NDK_ABI_NAME : "armeabi", "armeabi-v7a", "x86" or "mips" depending on ANDROID_ABI
-#   ANDROID_NDK_RELEASE : one of r5, r5b, r5c, r6, r6b, r7, r7b, r7c, r8, r8b, r8c, r8d; set only for NDK
+#   ANDROID_NDK_RELEASE : one of r5, r5b, r5c, r6, r6b, r7, r7b, r7c, r8, r8b, r8c, r8d, r8e; set only for NDK
 #   ANDROID_ARCH_NAME : "arm" or "x86" or "mips" depending on ANDROID_ABI
 #   ANDROID_SYSROOT : path to the compiler sysroot
 #   TOOL_OS_SUFFIX : "" or ".exe" depending on host platform
